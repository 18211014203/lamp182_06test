<?php			class DB	{		   private $tblName;    // 表名称	   private $pdo;        // 	   private $pk;         // 主键名称	   private $fields;     // 表的其它字段名称	   	   // 通过静态成员方法,返回一个对象	   static function Table($name)	   {	        return new DB($name);	   }	   	   // 私有, 外面就不能 new 了 通过Table()来实例化对象	   private function __construct($a)	   {		   	       $this -> tblName = $a;		   		   try{			   $dsn = "mysql:host=".HOST.";dbname=".DBNAME.";charset=utf8";			   $this -> pdo = new PDO($dsn,USER,UPWD);		   }catch(PDOException $e){			  die('连接错误!!!!');		   }		   		   $this -> getFields();		   	   }	/*	  功能: 插入一条记录	  参数: $tblName 表名称	        $data  要插入的记录信息数组	  返回: 成功返回插入记录的ID号, 失败返回false	*/	function insert($data)	{				$f = '';		$val = '';		foreach($data as $k => $v){		    $f .= "$k,";		    $val .= "'$v',";		}	    $f = rtrim($f, ',');		$val = rtrim($val, ',');				// 拼SQL语句		$sql = "insert into {$this -> tblName}({$f}) values({$val})";		// echo $sql; die;		// 发送执行, 返回受影响行数		$num = $this -> pdo -> exec($sql);				// 判断 语法错误		if ((int)$this -> pdo -> errorCode()) {		    echo $sql.'<br>';			die( $this -> pdo -> errorInfo()[2] );		}				// 判断 执行结果 即受影响行数		if ( $num ) {			return $this -> pdo -> lastInsertId(); // 返回最后插入的记录ID号		} else {			return false;		}			}	    /*	  功能: 删除某一条记录	  参数: $tblName 表名称	        $uid 要删除的id号	  返回:	*/ 	function delete($uid)	{		// 拼接SQL语法		$sql = "delete from {$this -> tblName} where {$this->pk}={$uid}";				// echo $sql;die;		// 返回受影响行数		$num = $this -> pdo -> exec($sql);		/*		  判断SQL语法错误, 如果有错误,就把错误打印出来,并且结束代码执行		  如果是 "00000" 表示没有错误, 不是"00000"有错误		*/		if ($this -> pdo -> errorCode()!=='00000'){			die( $this -> pdo -> errorInfo()[2] );  // 输出报错信息		}				// 结果检查  如果受影响行数大于0		if ( $num ) {			return true; 		} else {			return false;		}			}		/*	  功能: 修改一条记录信息	  参数: $tblName 表名称	        $data  修改后的数据			$uid  要修改的记录号	  返回: 成功 true    失败 false			*/	function update($data, $uid)	{         	  		$str = '';		foreach($data as $k => $v){		   $str .= "$k='$v',";		}		$str = rtrim($str, ',');				 		// SQL语句		$sql = "update {$this -> tblName} set {$str} where {$this->pk}={$uid}";				// 发送执行 返回受影响行数		$num = $this -> pdo -> exec( $sql );				// 判断语法错误		if ((int)$this -> pdo -> errorCode()) {		   die( $this -> pdo -> errorInfo()[2] );		}				// 判断执行结果		if ( $num ) {		   return true;		} else {		   return false;		}		}		/*	  功能: 查询数据	  参数:	        $condition 条件字符串	  返回: 成功 返回结果数组            失败 返回 false	  	*/	function select($condition='')	{				// 拼SQL语句		$sql = "select * from {$this -> tblName} {$condition}";		// echo $sql;die;			// 发送执行   返回 结果集对象		$stmt = $this -> pdo -> query( $sql );				// 真真正正的获取数据  全部拿出来		$users = $stmt -> fetchAll(PDO::FETCH_CLASS);		// 判断语法错		if ( (int)$this -> pdo -> errorCode() ) {		   die( $this -> pdo -> errorInfo()[2] );		}				// 判断执行结果		// return $users ? $users : false;				if ( $users ) {		   return $users;		} else {		   return false;		}	}			/*	  功能: 统计符合条件的记录数	  参数: $condition 条件字符串	  返回: 记录个数	*/	function rowCount($condition='')	{		// 拼接SQL			$sql = "select count(*) cnt from {$this->tblName} ".$condition;				// 发送执行		$stmt = $this -> pdo -> query($sql);				// 语法检查		if ($this -> pdo -> errorCode() !== '00000'){		    die($this -> pdo -> errorInfo()[2]);		}				$res = $stmt -> fetchAll(PDO::FETCH_CLASS);				return $res[0] -> cnt;				// echo '<pre>';		// print_r($res);		// die;	}		    /*		  功能: 获取表的所有字段及主键字段名		  参数: 		  返回: 无		*/		function getFields()		{		    $sql = "desc {$this -> tblName}";						$stmt = $this -> pdo -> query($sql);						$res = $stmt -> fetchAll(PDO::FETCH_CLASS);						$fields = [];			foreach($res as $k=>$v){				if ($v->Key=='PRI'){					$this -> pk = $v->Field;  // 得到数据表的 主键字段名					continue;				}			    $fields[] = $v -> Field;			}						$this -> fields = $fields;						}				}?>	